datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_NON_POOLING")
}

// DATABASE_URL="postgresql://developer:dwZRS.4Qcfz_N8W@postgresql-developer.alwaysdata.net/developer_dealer?schema=public"
// DATABASE_URL_NON_POOLING="postgresql://developer:dwZRS.4Qcfz_N8W@postgresql-developer.alwaysdata.net/developer_dealer?schema=public"

generator client {
    provider = "prisma-client-js"
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    verified DateTime?

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    car              Car[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Car {
    id Int @id @default(autoincrement())

    name         String
    model        String
    year         Int
    price        Int
    image        String
    type         String
    fuel         String
    transmission String
    description  String?
    isNew        Boolean

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
